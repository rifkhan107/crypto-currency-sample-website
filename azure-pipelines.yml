trigger:
  branches:
    include:
    - master

variables:
  acrName: 'acr234346'
  imageName: 'crypt-react-app'
  k8sNamespace: 'default'
  k8sDeploymentName: 'deployment'


stages:
- stage: Test
  displayName: 'Test stage'
  jobs:
  - job: Test
    displayName: 'Test Job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'
    - script: |
        npm ci
        npm run test
      displayName: 'Run tests'


- stage: Build
  displayName: 'Build the Application'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: 'Build Job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    # - task: NodeTool@0
    #   inputs:
    #     versionSpec: '16.x'
    #   displayName: 'Install Node.js'
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: 'docker-reg'
        repository: '$(imageName)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
    
- stage: ScanAndPushImage
  displayName: 'Scan and Push Image to ACR'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: ScanAndPushImage
    displayName: 'Scan and Push Image Job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        containerRegistry: 'docker-reg'
        repository: '$(imageName)'
        command: 'login'
    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        containerRegistry: 'docker-reg'
        repository: '$(imageName)'
        command: 'push'
    - task: trivy@1
      inputs:
        version: 'latest'
        docker: false
        loginDockerConfig: true
        image: $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
        ignoreUnfixed: true
      displayName: Scan Docker image with Trivy

    
- stage: Deploy
  displayName: 'Deploy stage'
  dependsOn: ScanAndPushImage
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy Job'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: Kubernetes@1
            displayName: 'Deploy Deployment to AKS'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'my-connection'
              azureResourceGroup: 'dev-rg'
              kubernetesCluster: 'demo-cluster'
              useClusterAdmin: true
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: deployment
                  namespace: default
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      app: crypto-app
                  template:
                    metadata:
                      labels:
                        app: crypto-app
                    spec:
                      containers:
                      - name: $(imageName)
                        image: $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
                        ports:
                        - containerPort: 5000
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

          - task: Kubernetes@1
            displayName: 'Deploy Service to AKS'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: 'my-connection'
              azureResourceGroup: 'dev-rg'
              kubernetesCluster: 'demo-cluster'
              useClusterAdmin: true
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                apiVersion: v1
                kind: Service
                metadata:
                  name: crypto-app-service
                  namespace: default
                spec:
                  selector:
                    app: crypto-app
                  ports:
                    - protocol: TCP
                      port: 80
                      targetPort: 5000
                  type: LoadBalancer
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              